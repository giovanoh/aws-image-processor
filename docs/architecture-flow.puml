@startuml Image Processor - Complete Flow
!theme cerulean-outline
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true
skinparam backgroundColor White
skinparam actor {
  FontColor Black
}
skinparam participant {
  FontColor Black
}
skinparam queue {
  FontColor Black
}

title Complete Flow: Image Processing (S3 + SQS + Lambda)

actor "User" as User
participant "S3\n(image-processor-in)" as S3Input #LightBlue
queue "SQS\n(product-image-queue)" as SQS #Orange
participant "Lambda\n(ProcessImageFunction)" as Lambda #Green
participant "S3\n(image-processor-out)" as S3Output #LightBlue
queue "DLQ\n(product-image-queue-dlq)" as DLQ #Red
participant "CloudWatch\nLogs" as CW #Purple

== 1. Image Upload ==

User -> S3Input: Upload image\n(photo.jpg)
activate S3Input
note right of S3Input
  Bucket: image-processor-in
  Event Notification configured
end note

S3Input --> User: 200 OK
deactivate S3Input

== 2. Event Notification ==

S3Input -> SQS: Send S3 event\n(ObjectCreated:Put)
activate SQS
note right of SQS
  Message contains:
  - Bucket: image-processor-in
  - Key: photo.jpg
  - Size: 2MB
  - Timestamp
end note

SQS --> S3Input: ACK
deactivate SQS

== 3. Lambda Trigger ==

SQS -> Lambda: Poll messages\n(batch_size: 10)
activate Lambda
note right of Lambda
  Lambda is invoked
  automatically by SQS
  with up to 10 messages
end note

Lambda -> CW: log.Printf("Received N messages")
activate CW
CW --> Lambda: OK
deactivate CW

== 4. Processing ==

Lambda -> S3Input: GetObject(photo.jpg)
activate S3Input
S3Input --> Lambda: Return image (bytes)
deactivate S3Input

Lambda -> CW: log.Printf("Downloading image...")
activate CW
CW --> Lambda: OK
deactivate CW

note over Lambda
  **Internal Processing:**
  1. Decode image
  2. Create thumbnail (200x200)
  3. Create medium (800x600)
  4. Compress JPEG (quality 85)
end note

Lambda -> Lambda: resize.Thumbnail(200x200)
Lambda -> Lambda: resize.Thumbnail(800x600)

== 5. Upload Processed Images ==

Lambda -> S3Output: PutObject(thumbnails/photo.jpg)
activate S3Output
S3Output --> Lambda: 200 OK
deactivate S3Output

Lambda -> CW: log.Printf("Thumbnail created")
activate CW
CW --> Lambda: OK
deactivate CW

Lambda -> S3Output: PutObject(medium/photo.jpg)
activate S3Output
S3Output --> Lambda: 200 OK
deactivate S3Output

Lambda -> CW: log.Printf("Medium created")
activate CW
CW --> Lambda: OK
deactivate CW

Lambda -> CW: log.Printf("Success!")
activate CW
CW --> Lambda: OK
deactivate CW

== 6. Completion (Success) ==

Lambda --> SQS: return nil (success)
deactivate Lambda

note right of SQS
  When Lambda returns
  success (nil), SQS deletes
  the message automatically
end note

SQS -> SQS: DeleteMessage()

note over User, CW #LightGreen
  **FLOW COMPLETED SUCCESSFULLY**
  Result:
  - s3://image-processor-out/thumbnails/photo.jpg
  - s3://image-processor-out/medium/photo.jpg
end note

@enduml
